1. Register.cshtml
-------------------------

@model CSharpAssignment.Model.RegisterModel
@{
    ViewBag.Title = "Register";
}
<head>
    <link href="~/Content/Style.css" rel="stylesheet" />
</head>
@using (Html.BeginForm("Register", "Register", FormMethod.Post, new { @id = "registerFormId", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    HtmlHelper.UnobtrusiveJavaScriptEnabled = true;
    <div class="card custom-card">
        <div class="card-header bg-success text-white">
            <h3 class="text-center">Register User</h3>
        </div>
        <br />
        <div class="container">
            @if (ViewBag.successToActivateAccount != null)
            {
                <div class="alert alert-success" role="alert">
                    @ViewBag.successToActivateAccount
                </div>
            }
            @if (ViewBag.errorToActivateAcccount != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.errorToActivateAcccount
                </div>
            }
            @if (ViewBag.isExists != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.isExists
                </div>
            }
            @if (ViewBag.registerError != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.registerError
                </div>
            }

            @if (ViewBag.isRegistered != null)
            {
                <div class="alert alert-success" role="alert">
                    @ViewBag.isRegistered
                </div>
            }
        </div>
        <div class="card-body container">
            <div class="form-group">
                <label class="col-sm-2 col-form-label">User Name</label>
                <div class="col-md-10">
                    <input type="text" class="form-control" name="Name" placeholder="User Name" style="width: 75%" id="Name" required>
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Email</label>
                <div class="col-md-10">
                    <input type="email" name="EmailId" class="form-control" placeholder="User Email" id="Email" style="width: 75%" email required>
                    @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Contact Number</label>
                <div class="col-md-10">
                    <input type="number" name="ContactNumber" class="form-control" placeholder="Contact Number" style="width: 75%" id="ContactNumber" required>
                    @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Address</label>
                <div class="col-md-10">
                    <textarea class="form-control" name="Address" placeholder="Address" id="Address" style="width: 75%" required></textarea>
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Country</label>
                <div class="col-md-10">
                    <select name="Country" id="countryDropDownList" required class="mdropdown">
                        <option>---Select Country---</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">State</label>
                <div class="col-md-10">
                    <select name="State" id="stateDropDownList" required class="mdropdown">
                        <option>---Select State---</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">City</label>
                <div class="col-md-10">
                    <select name="City" id="cityDropDownList" required class="mdropdown">
                        <option>---Select City---</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">ZipCode</label>
                <div class="col-md-10">
                    <input type="number" class="form-control" name="ZipCode" placeholder="Zip Code" id="ZipCode" style="width: 75%" required>
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Password</label>
                <div class="col-md-10">
                    <input type="password" name="Password" class="form-control" placeholder="Password" id="Password" style="width: 75%" required>
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 col-form-label">Confirm Password</label>
                <div class="col-md-10">
                    <input type="password" name="ConfirmPassword" class="form-control" placeholder="Confirm Password" style="width: 75%" id="ConfirmPassword" required>
                </div>
            </div>
            <div class="form-group container">
                <button type="submit" class="btn btn-success rounded-0">Register</button>
                <br />
                @Html.ActionLink("Already have an account? Login here", "Login", "Login")
            </div>
        </div>
    </div>
}
<!--  jquery script  -->
<script src="~/Scripts/jquery-3.5.1.min.js"></script>
<!--  validation script  -->
<script src="~/Scripts/jquery.validate.min.js"></script>
<script type="text/javascript" language="javascript">
    $(function () {

        AjaxCall('/Register/GetCountries', null).done(function (response) {
            if (response.length > 0) {
                $('#countryDropDownList').html('');
                var options = '';
                options += '<option value="Select">---Select Country---</option>';
                for (var i = 0; i < response.length; i++) {
                    options += '<option value="' + response[i] + '">' + response[i] + '</option>';
                }
                $('#countryDropDownList').append(options);

            }
        }).fail(function (error) {
            alert(error.StatusText);
        });

        $('#countryDropDownList').on("change", function () {
            var country = $('#countryDropDownList').val();
            var obj = { country: country };
            AjaxCall('/Register/GetStates', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#stateDropDownList').html('');
                    var options = '';
                    options += '<option value="Select">---Select State---</option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i] + '">' + response[i] + '</option>';
                    }
                    $('#stateDropDownList').append(options);

                }
            }).fail(function (error) {
                alert(error.StatusText);
            });
        });

        $('#stateDropDownList').on("change", function () {
            var state = $('#stateDropDownList').val();
            var obj = { state: state };
            AjaxCall('/Register/GetCities', JSON.stringify(obj), 'POST').done(function (response) {
                if (response.length > 0) {
                    $('#cityDropDownList').html('');
                    var options = '';
                    options += '<option value="Select">---Select City---</option>';
                    for (var i = 0; i < response.length; i++) {
                        options += '<option value="' + response[i] + '">' + response[i] + '</option>';
                    }
                    $('#cityDropDownList').append(options);

                }
            }).fail(function (error) {
                alert(error.StatusText);
            });
        });
    });

    function AjaxCall(url, data, type) {
        return $.ajax({
            url: url,
            type: type ? type : 'GET',
            data: data,
            contentType: 'application/json'
        });
    }
</script>


2.RegisterModel
--------------

using System;

namespace CSharpAssignment.Model
{
    public class RegisterModel
    {
        public int RegistrationId { get; set; }
        public string Name { get; set; }
        public string EmailId { get; set; }
        public string ContactNumber { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Country { get; set; }
        public string ZipCode { get; set; }
        public string Password { get; set; }
        public bool IsEmailVerified { get; set; }
        public System.Guid ActivationLink { get; set; }
        public System.DateTime CreatedDate { get; set; }
        public Nullable<System.DateTime> UpdatedDate { get; set; }
    }
}


3.RegisterController
--------------------------
using System;
using System.Collections.Generic;
using System.Web.Mvc;
namespace CSharpAssignment.Controllers
{
    public class RegisterController : Controller
    {
        [AllowAnonymous]
        public ActionResult Register()
        {
            try
            {
                return View();
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        
        public JsonResult GetCountries()
        {
            var Countries = new List<string>();
            Countries.Add("India");
            Countries.Add("Canada");
            Countries.Add("USA");
            return Json(Countries, JsonRequestBehavior.AllowGet);
        }
        
        [HttpPost]
        public JsonResult GetStates(string country)
        {
            var States = new List<string>();
            if (!string.IsNullOrWhiteSpace(country))
            {
                if (country.Equals("India"))
                {
                    States.Add("Gujarat");
                    States.Add("Maharashtra");
                    States.Add("Delhi");
                }
                if (country.Equals("Canada"))
                {
                    States.Add("Quebec");
                    States.Add("Manitoba");
                    States.Add("Ontario");
                }
                if (country.Equals("USA"))
                {
                    States.Add("California");
                    States.Add("Texas");
                    States.Add("Ohio");
                }
            }
            return Json(States, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult GetCities(string state)
        {
            var Cities = new List<string>();
            if (!string.IsNullOrWhiteSpace(state))
            {
                if (state.Equals("Gujarat"))
                {
                    Cities.Add("Ahmedabad");
                    Cities.Add("Surat");
                }
                if (state.Equals("Maharashtra"))
                {
                    Cities.Add("Mumbai");
                    Cities.Add("Pune");
                }
                if (state.Equals("Delhi"))
                {
                    Cities.Add("Dwarka");
                    Cities.Add("Agra");
                }
                if (state.Equals("Quebec"))
                {
                    Cities.Add("Montreal");
                }
                if (state.Equals("Manitoba"))
                {
                    Cities.Add("Winnipeg");
                }
                if (state.Equals("Ontario"))
                {
                    Cities.Add("Toronto");
                }
                if (state.Equals("California"))
                {
                    Cities.Add("Los Angeles");
                    Cities.Add("Fresno");
                }
                if (state.Equals("Texas"))
                {
                    Cities.Add("Forth Worth");
                }
                if (state.Equals("Ohio"))
                {
                    Cities.Add("Columbus");
                }
            }
            return Json(Cities, JsonRequestBehavior.AllowGet);
        }
  }
}
